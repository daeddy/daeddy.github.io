{"version":3,"file":"main.js","mappings":"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","sources":["webpack://rainbow-particle-breaker/./src/index.ts","webpack://rainbow-particle-breaker/./src/components/Bar.ts","webpack://rainbow-particle-breaker/./src/components/Blocks.ts","webpack://rainbow-particle-breaker/./src/components/GameCanvas.ts","webpack://rainbow-particle-breaker/./src/components/Particle.ts","webpack://rainbow-particle-breaker/./src/components/index.ts","webpack://rainbow-particle-breaker/./src/game/index.ts","webpack://rainbow-particle-breaker/./src/utils/colors.ts","webpack://rainbow-particle-breaker/webpack/bootstrap"],"sourcesContent":["import BlockBreaker from './game';\n\nconst MIN_WIDTH = 700;\nconst MIN_HEIGHT = 600;\n\nwindow.addEventListener(\"load\", (e) => {\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const container = document.getElementById(\"container\") as HTMLDivElement;\n  const width = window.innerWidth > MIN_WIDTH ? MIN_WIDTH : window.innerWidth;\n  const height = window.innerWidth > MIN_WIDTH ? MIN_HEIGHT : window.innerHeight * 0.85;\n\n  canvas.width = width;\n  canvas.height = height;\n  const game = new BlockBreaker(container, canvas, width, height);\n\n  game.init();\n});","import { RGBColor } from \"utils/colors\";\n\nconst BAR_COLOR: RGBColor = { red: 255, green: 0, blue: 0 };\nclass Bar {\n  x: number = 0;\n  y: number = 0;\n  width: number = 50;\n  height: number = 10;\n  color: RGBColor = BAR_COLOR\n\n  hitTestPoint(x:number, y:number): boolean {\n    return (\n      x >= this.x && \n      x <= this.x + this.width && \n      y >= this.y && \n      y <= this.y + this.height\n    );\n  }\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nexport default Bar;","import Particle from './Particle';\nimport { getRainbowColors } from 'utils/colors';\n\nclass Blocks {\n  private _count: number;\n  private _width: number;\n  private _height: number;\n  \n  count(): number { return this._count; }\n  width(): number { return this._width; }\n  height(): number { return this._height; }\n\n  values: (Particle | undefined)[];\n\n  constructor(width: number, height: number) {\n    this._width = width;\n    this._height = height;\n    this._count = width * height;\n    this.values = new Array(width * height);\n\n    const rainbowColors = getRainbowColors(this._width);\n    for (var i: number = 0; i < this._width; i++) {\n      for (var j: number = 0; j < this._height; j++) {\n        var p: Particle = new Particle(i, j, rainbowColors[i]);\n        this.values[i + j * this._width] = p;\n      }\n    }\n  }\n\n  getParticle(x: number, y: number): Particle | undefined {\n    var index: number = x + y * this._width;\n    if (index >= this.values.length || index < 0) {\n      return undefined;\n    }\n    return this.values[x + y * this._width];\n  }\n\n  removeParticle(x: number, y: number): Particle | undefined {\n    var p: Particle | undefined = this.values[x + y * this._width];\n    if (p) {\n      this._count--;\n      this.values[x + y * this._width] = undefined;\n    }\n    return p;\n  }\n}\n\nexport default Blocks;","import { Bar } from \"components\";\nimport { RGBColor } from \"utils/colors\";\n\nexport default class GameCanvas {\n  private _canvas: HTMLCanvasElement;\n  private _canvasCtx: CanvasRenderingContext2D | null;\n  private _imgData!: ImageData;\n  private _pixels!: Uint8ClampedArray;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this._canvas = canvas;\n    this._canvasCtx = this._canvas.getContext(\"2d\");\n    this.clear();\n  }\n\n  public renderBar(bar: Bar) {\n    this._canvasCtx.beginPath();\n    this._canvasCtx.fillStyle = `rgb(${bar.color.red},${bar.color.green},${bar.color.blue})`;\n    this._canvasCtx.fillRect(bar.x, bar.y, bar.width, bar.height);\n    this._canvasCtx.stroke();\n  }\n\n  public clear() {\n    this._canvasCtx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._imgData = this._canvasCtx.getImageData(0, 0, this._canvas.width, this._canvas.height);\n    this._pixels = this._imgData.data;\n  }\n\n  public render() {\n    this._canvasCtx.putImageData(this._imgData, 0, 0);\n  }\n\n  public setPixel(x: number, y:number, color: RGBColor): void {\n    var widthBase = this._imgData.width * 4;\n  \n    var index = ((y * widthBase) + (x * 4));\n    this._pixels[index] = color.red; //R\n    this._pixels[index + 1] = color.green; //G\n    this._pixels[index + 2] = color.blue; //B\n    this._pixels[index + 3] = 0xFF; //A\n  }\n\n  public offsetLeft() { return this._canvas.offsetLeft; }\n}","import { RGBColor, DEFAULT_COLOR } from \"utils/colors\";\n\nclass Particle {\n  x: number;\n  y: number;\n\n  xSpeed: number = 0;\n  ySpeed: number = 0;\n  color: RGBColor = DEFAULT_COLOR;\n\n  constructor(x: number = 0, y: number = 0, color: RGBColor) {\n    this.x = x;\n    this.y = y;\n    this.color = color;\n  }\n\n  public invertXDirection() {\n    this.xSpeed = -this.xSpeed;\n  }\n  public invertYDirection() {\n    this.ySpeed = -this.ySpeed;\n  }\n  public X(): number {\n    return Math.round(this.x);\n  }\n  public Y(): number {\n    return Math.round(this.y);\n  }\n  public speed(): number {\n    return Math.sqrt(this.xSpeed * this.xSpeed + this.xSpeed * this.xSpeed)\n  }\n  public radian(): number { \n    return Math.atan2(this.ySpeed, this.xSpeed)\n  }\n}\n\nexport default Particle;","import Bar from './Bar';\nimport Blocks from './Blocks';\nimport Particle from './Particle';\nimport GameCanvas from './GameCanvas';\n\nexport { Bar, Blocks, Particle, GameCanvas };","import { Blocks, Particle, Bar, GameCanvas } from 'components';\nimport { DEFAULT_COLOR } from 'utils/colors';\n\nclass BlockBreaker {\n  private _height: number;\n  private _width: number;\n  private _canvas: GameCanvas;\n  private _blocks!: Blocks;\n  private _fallBlocks!: Particle[];\n  private _balls!: Particle[];\n  private _bar!: Bar;\n  // fps stuff\n  private _fps: number = 30;\n  private _fpsInterval!: number;\n  private _now!: number;\n  private _then!: number;\n  private _elapsed!: number;\n\n  private _handleWin() {\n    alert(\"Done!\\n\");\n    this.init();\n  }\n\n  private _handleLose() {\n    alert(\"Try again\");\n    this.init();\n  }\n\n  private _update() {\n    this._now = Date.now();\n    this._elapsed = this._now - this._then;\n\n    if (this._canvas) {\n      if (this._elapsed > this._fpsInterval) {\n        // Get ready for next frame by setting then=now, but...\n        // Also, adjust for fpsInterval not being multiple of 16.67\n        this._then = this._now - (this._elapsed % this._fpsInterval);\n\n        this._canvas.clear();\n\n        // render blocks\n        this._blocks.values.forEach(block => {\n          if (block) {\n            this._canvas.setPixel(block.x, block.y, block.color);\n          }\n        });\n\n        var removeBalls: Particle[] = new Array();\n        this._balls.forEach(ball => {\n          var bSpeed: number = ball.speed();\n          var bRadian: number = ball.radian();\n\n          // Render a line of length speed\n          for (var i = 0; i < bSpeed; i++) {\n            ball.x += ball.xSpeed / bSpeed;\n            ball.y += ball.ySpeed / bSpeed;\n\n            var hitParticle: Particle | undefined = this._blocks.getParticle(ball.X(), ball.Y());\n            if (hitParticle) {\n              var removedP: Particle | undefined = this._blocks.removeParticle(ball.X(), ball.Y());\n              if (removedP) {\n                // hit particle moves at an angle from the coliding ball\n                removedP.xSpeed = Math.cos(bRadian + Math.PI * 2 / (30 * Math.random()) - 15) * 3;\n                removedP.ySpeed = 1;\n                removedP.color = hitParticle.color;\n                this._fallBlocks.push(removedP);\n              }\n              // colliding ball inverts y-direction\n              ball.invertYDirection();\n            }\n\n            // if ball hit the edges invert x-direction\n            if ((ball.x < 0 && ball.xSpeed < 0) || (ball.x > this._width && ball.xSpeed > 0)) {\n              ball.invertXDirection();\n            }\n            // if ball out of bounds (top) invert y-direction\n            if (ball.y < 0 && ball.ySpeed < 0) {\n              ball.invertYDirection();\n            }\n            // if ball out of bounds (bottom) remove\n            if (ball.y > this._height || ball.y < 0) {\n              removeBalls.push(ball);\n            }\n            // if it hit the bar invert direction\n            if (this._bar.hitTestPoint(ball.x, ball.y)) {\n              ball.ySpeed = -Math.abs(ball.ySpeed);\n            }\n\n            this._canvas.setPixel(ball.X(), ball.Y(), ball.color);\n          }\n        });\n\n        removeBalls.forEach(b => {\n          var index = this._balls.indexOf(b);\n          if (index != -1) {\n            this._balls.splice(index, 1);\n          }\n        });\n\n        var removeFallBs: Particle[] = new Array();\n        this._fallBlocks.forEach(fallP => {\n          fallP.ySpeed += 0.1;\n          fallP.x += fallP.xSpeed;\n          if (fallP.x < 0) {\n            fallP.x += this._width;\n          }\n          fallP.y += fallP.ySpeed;\n          this._canvas.setPixel(fallP.X(), fallP.Y(), fallP.color);\n\n          if (this._bar.hitTestPoint(fallP.x, fallP.y)) {\n            var newball: Particle = new Particle(fallP.x, fallP.y, fallP.color);\n            newball.xSpeed = Math.random() * 10;\n            newball.ySpeed = Math.random() * 9 + 1;\n            this._balls.push(newball);\n            removeFallBs.push(fallP);\n          } else if (fallP.y > this._height) {\n            removeFallBs.push(fallP);\n          }\n        });\n\n        removeFallBs.forEach(b => {\n          var index = this._fallBlocks.indexOf(b);\n          if (index != -1) {\n            this._fallBlocks.splice(index, 1);\n          }\n        });\n\n        // Draw\n        this._canvas.render();\n      }\n\n      if (this._blocks.count() == 0) {\n        this._handleWin();\n      } else if (this._balls.length == 0) {\n        this._handleLose();\n      } else {\n        window.requestAnimationFrame(this._update.bind(this));\n      }\n\n      // bar renders independant of fps constraint\n      this._canvas.renderBar(this._bar);\n    }\n  }\n\n  private _touchmove(evt: any) {\n    this._bar.x = evt.touches[0].clientX - this._canvas.offsetLeft() - (this._bar.width / 2);\n    if (this._bar.x + this._bar.width > this._width) {\n      this._bar.x = this._width - this._bar.width;\n    }\n    if (this._bar.x < 0) {\n      this._bar.x = 0;\n    }\n    evt.preventDefault();\n  }\n\n  private _mousemove(evt: any) {\n    this._bar.x = evt.clientX - this._canvas.offsetLeft() - (this._bar.width / 2);\n    if (this._bar.x + this._bar.width > this._width) {\n      this._bar.x = this._width - this._bar.width;\n    }\n    if (this._bar.x < 0) {\n      this._bar.x = 0;\n    }\n  }\n\n  public init() {\n    this._blocks = new Blocks(this._width, 200);\n\n    this._fallBlocks = new Array();\n\n    const barHeight = 10;\n    const barY = this._height - barHeight - 2;\n    this._bar = new Bar(0, barY, 200, barHeight);\n\n    // Start with white ball in the middle\n    var _initialBall: Particle = new Particle(this._width / 2, this._height / 2, DEFAULT_COLOR);\n    _initialBall.xSpeed = Math.random() * 10;\n    _initialBall.ySpeed = Math.random() * 9 - 1;\n\n    this._balls = new Array();\n    this._balls.push(_initialBall);\n\n    this._fpsInterval = 1000 / this._fps;\n    this._then = Date.now();\n\n    window.requestAnimationFrame(this._update.bind(this));\n  }\n\n  constructor(container: HTMLDivElement, canvas: HTMLCanvasElement, width: number, height: number) {\n    this._width = width;\n    this._height = height;\n    this._canvas = new GameCanvas(canvas);\n\n    // Controll is the entire container area \n    container.addEventListener('mousemove', this._mousemove.bind(this), false);\n    container.addEventListener('touchmove', this._touchmove.bind(this), false);\n  }\n}\n\nexport default BlockBreaker;\n","export type RGBColor = {\n  red: number,\n  green: number,\n  blue: number\n}\n\nexport const DEFAULT_COLOR: RGBColor = { red: 0xFF, green: 0xFF, blue: 0xFF };\n\n// https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=8%2CH))%3D%2B1%7D-,HSV%20to%20RGB,-%5Bedit%5D\nconst HSVToRGB = (hue: number, saturation: number, value: number): RGBColor => {\n  if (\n    (hue < 0 || hue > 360) ||             // [0, 360]\n    (saturation < 0 || saturation > 1) || // [0, 1]\n    (value < 0 || value > 1)              // [0, 1]\n  ) {\n    throw 'Incorrect HSV values [HSVToRGB]'\n  }\n  const h = hue/60;\n\n  const c = value * saturation; // Chroma\n  // Intermediate value X for the second largest component of this color\n  const x = c * (1 - Math.abs(h % 2 - 1));\n\n  if (h >= 0 && h < 1) {\n    return { red: c * 255, green: x * 255, blue: 0 };\n  }\n  if (h >= 1 && h < 2) {\n    return { red: x * 255, green: c  * 255, blue: 0 };\n  }\n  if (h >= 2 && h < 3) {\n    return { red: 0, green: c  * 255, blue: x * 255 };\n  }\n  if (h >= 3 && h < 4) {\n    return { red: 0, green: x * 255, blue: c  * 255 };\n  }\n  if (h >= 4 && h < 5) {\n    return { red: x * 255, green: 0, blue: c  * 255 };\n  }\n  if (h >= 5 && h < 6) {\n    return { red: c  * 255, green: 0, blue: x * 255 };\n  }\n\n  return DEFAULT_COLOR;\n}\n\n/*\n  Create an \"n\" length array of rbg colors of increasing hue [0 - 360] \n  with max saturation and value (1 & 1)\n*/\nexport const getRainbowColors = (n: number): RGBColor[]  => {\n  const saturation = 1.0;\n  const value = 1.0;\n  const colors: RGBColor[] = [];\n\n  for (let index: number = 0; index < n; index++) {\n    const hue = (360 * index / n); // reduce to factor of 360\n    const rgb = HSVToRGB(hue, saturation, value);\n    colors.push(rgb); \n  }\n  return colors;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["BAR_COLOR","red","green","blue","x","y","width","height","color","this","hitTestPoint","Bar","_width","_height","_count","values","Array","rainbowColors","getRainbowColors","i","j","p","count","getParticle","index","length","removeParticle","undefined","Blocks","canvas","_canvas","_canvasCtx","getContext","clear","renderBar","bar","beginPath","fillStyle","fillRect","stroke","clearRect","_imgData","getImageData","_pixels","data","render","putImageData","setPixel","offsetLeft","xSpeed","ySpeed","DEFAULT_COLOR","invertXDirection","invertYDirection","X","Math","round","Y","speed","sqrt","radian","atan2","Particle","GameCanvas","container","_fps","addEventListener","_mousemove","bind","_touchmove","_handleWin","alert","init","_handleLose","_update","_now","Date","now","_elapsed","_then","_fpsInterval","_blocks","forEach","block","removeBalls","_balls","ball","bSpeed","bRadian","hitParticle","removedP","cos","PI","random","_fallBlocks","push","_bar","abs","b","indexOf","splice","removeFallBs","fallP","newball","window","requestAnimationFrame","evt","touches","clientX","preventDefault","barY","_initialBall","BlockBreaker","HSVToRGB","hue","saturation","value","h","c","n","colors","rgb","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","e","document","getElementById","innerWidth","innerHeight"],"sourceRoot":""}