(()=>{"use strict";var t,e={167:(t,e)=>{e.__esModule=!0;var i={red:255,green:0,blue:0},s=function(){function t(t,e,s,h){this.x=0,this.y=0,this.width=50,this.height=10,this.color=i,this.x=t,this.y=e,this.width=s,this.height=h}return t.prototype.hitTestPoint=function(t,e){return t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height},t}();e.default=s},746:(t,e,i)=>{e.__esModule=!0;var s=i(509),h=i(409),n=function(){function t(t,e){this._width=t,this._height=e,this._count=t*e,this.values=new Array(t*e);for(var i=(0,h.getRainbowColors)(this._width),n=0;n<this._width;n++)for(var a=0;a<this._height;a++){var r=new s.default(n,a,i[n]);this.values[n+a*this._width]=r}}return t.prototype.count=function(){return this._count},t.prototype.width=function(){return this._width},t.prototype.height=function(){return this._height},t.prototype.getParticle=function(t,e){var i=t+e*this._width;if(!(i>=this.values.length||i<0))return this.values[t+e*this._width]},t.prototype.removeParticle=function(t,e){var i=this.values[t+e*this._width];return i&&(this._count--,this.values[t+e*this._width]=void 0),i},t}();e.default=n},836:(t,e)=>{e.__esModule=!0;var i=function(){function t(t){this._canvas=t,this._canvasCtx=this._canvas.getContext("2d"),this.clear()}return t.prototype.renderBar=function(t){this._canvasCtx.beginPath(),this._canvasCtx.fillStyle="rgb(".concat(t.color.red,",").concat(t.color.green,",").concat(t.color.blue,")"),this._canvasCtx.fillRect(t.x,t.y,t.width,t.height),this._canvasCtx.stroke()},t.prototype.clear=function(){this._canvasCtx.clearRect(0,0,this._canvas.width,this._canvas.height),this._imgData=this._canvasCtx.getImageData(0,0,this._canvas.width,this._canvas.height),this._pixels=this._imgData.data},t.prototype.render=function(){this._canvasCtx.putImageData(this._imgData,0,0)},t.prototype.setPixel=function(t,e,i){var s=e*(4*this._imgData.width)+4*t;this._pixels[s]=i.red,this._pixels[s+1]=i.green,this._pixels[s+2]=i.blue,this._pixels[s+3]=255},t.prototype.offsetLeft=function(){return this._canvas.offsetLeft},t}();e.default=i},509:(t,e,i)=>{e.__esModule=!0;var s=i(409),h=function(){function t(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),this.xSpeed=0,this.ySpeed=0,this.color=s.DEFAULT_COLOR,this.x=t,this.y=e,this.color=i}return t.prototype.invertXDirection=function(){this.xSpeed=-this.xSpeed},t.prototype.invertYDirection=function(){this.ySpeed=-this.ySpeed},t.prototype.X=function(){return Math.round(this.x)},t.prototype.Y=function(){return Math.round(this.y)},t.prototype.speed=function(){return Math.sqrt(this.xSpeed*this.xSpeed+this.xSpeed*this.xSpeed)},t.prototype.radian=function(){return Math.atan2(this.ySpeed,this.xSpeed)},t}();e.default=h},740:(t,e,i)=>{e.__esModule=!0,e.GameCanvas=e.Particle=e.Blocks=e.Bar=void 0;var s=i(167);e.Bar=s.default;var h=i(746);e.Blocks=h.default;var n=i(509);e.Particle=n.default;var a=i(836);e.GameCanvas=a.default},989:(t,e,i)=>{e.__esModule=!0;var s=i(740),h=i(409),n=function(){function t(t,e,i,h){this._fps=30,this._width=i,this._height=h,this._canvas=new s.GameCanvas(e),t.addEventListener("mousemove",this._mousemove.bind(this),!1),t.addEventListener("touchmove",this._touchmove.bind(this),!1)}return t.prototype._handleWin=function(){alert("Done!\n"),this.init()},t.prototype._handleLose=function(){alert("Try again"),this.init()},t.prototype._update=function(){var t=this;if(this._now=Date.now(),this._elapsed=this._now-this._then,this._canvas){if(this._elapsed>this._fpsInterval){this._then=this._now-this._elapsed%this._fpsInterval,this._canvas.clear(),this._blocks.values.forEach((function(e){e&&t._canvas.setPixel(e.x,e.y,e.color)}));var e=new Array;this._balls.forEach((function(i){for(var s=i.speed(),h=i.radian(),n=0;n<s;n++){i.x+=i.xSpeed/s,i.y+=i.ySpeed/s;var a=t._blocks.getParticle(i.X(),i.Y());if(a){var r=t._blocks.removeParticle(i.X(),i.Y());r&&(r.xSpeed=3*Math.cos(h+2*Math.PI/(30*Math.random())-15),r.ySpeed=1,r.color=a.color,t._fallBlocks.push(r)),i.invertYDirection()}(i.x<0&&i.xSpeed<0||i.x>t._width&&i.xSpeed>0)&&i.invertXDirection(),i.y<0&&i.ySpeed<0&&i.invertYDirection(),(i.y>t._height||i.y<0)&&e.push(i),t._bar.hitTestPoint(i.x,i.y)&&(i.ySpeed=-Math.abs(i.ySpeed)),t._canvas.setPixel(i.X(),i.Y(),i.color)}})),e.forEach((function(e){var i=t._balls.indexOf(e);-1!=i&&t._balls.splice(i,1)}));var i=new Array;this._fallBlocks.forEach((function(e){if(e.ySpeed+=.1,e.x+=e.xSpeed,e.x<0&&(e.x+=t._width),e.y+=e.ySpeed,t._canvas.setPixel(e.X(),e.Y(),e.color),t._bar.hitTestPoint(e.x,e.y)){var h=new s.Particle(e.x,e.y,e.color);h.xSpeed=10*Math.random(),h.ySpeed=9*Math.random()+1,t._balls.push(h),i.push(e)}else e.y>t._height&&i.push(e)})),i.forEach((function(e){var i=t._fallBlocks.indexOf(e);-1!=i&&t._fallBlocks.splice(i,1)})),this._canvas.render()}0==this._blocks.count()?this._handleWin():0==this._balls.length?this._handleLose():window.requestAnimationFrame(this._update.bind(this)),this._canvas.renderBar(this._bar)}},t.prototype._touchmove=function(t){this._bar.x=t.touches[0].clientX-this._canvas.offsetLeft()-this._bar.width/2,this._bar.x+this._bar.width>this._width&&(this._bar.x=this._width-this._bar.width),this._bar.x<0&&(this._bar.x=0),t.preventDefault()},t.prototype._mousemove=function(t){this._bar.x=t.clientX-this._canvas.offsetLeft()-this._bar.width/2,this._bar.x+this._bar.width>this._width&&(this._bar.x=this._width-this._bar.width),this._bar.x<0&&(this._bar.x=0)},t.prototype.init=function(){this._blocks=new s.Blocks(this._width,200),this._fallBlocks=new Array;var t=this._height-10-2;this._bar=new s.Bar(0,t,200,10);var e=new s.Particle(this._width/2,this._height/2,h.DEFAULT_COLOR);e.xSpeed=10*Math.random(),e.ySpeed=9*Math.random()-1,this._balls=new Array,this._balls.push(e),this._fpsInterval=1e3/this._fps,this._then=Date.now(),window.requestAnimationFrame(this._update.bind(this))},t}();e.default=n},409:(t,e)=>{e.__esModule=!0,e.getRainbowColors=e.DEFAULT_COLOR=void 0,e.DEFAULT_COLOR={red:255,green:255,blue:255};var i=function(t,i,s){if(t<0||t>360||i<0||i>1||s<0||s>1)throw"Incorrect HSV values [HSVToRGB]";var h=t/60,n=s*i,a=n*(1-Math.abs(h%2-1));return h>=0&&h<1?{red:255*n,green:255*a,blue:0}:h>=1&&h<2?{red:255*a,green:255*n,blue:0}:h>=2&&h<3?{red:0,green:255*n,blue:255*a}:h>=3&&h<4?{red:0,green:255*a,blue:255*n}:h>=4&&h<5?{red:255*a,green:0,blue:255*n}:h>=5&&h<6?{red:255*n,green:0,blue:255*a}:e.DEFAULT_COLOR};e.getRainbowColors=function(t){for(var e=[],s=0;s<t;s++){var h=i(360*s/t,1,1);e.push(h)}return e}}},i={};t=function t(s){var h=i[s];if(void 0!==h)return h.exports;var n=i[s]={exports:{}};return e[s](n,n.exports,t),n.exports}(989),window.addEventListener("load",(function(e){var i=document.getElementById("canvas"),s=document.getElementById("container"),h=window.innerWidth>700?700:window.innerWidth,n=window.innerWidth>700?600:.85*window.innerHeight;i.width=h,i.height=n,new t.default(s,i,h,n).init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUdBLEVBQVErRixFQUFHL0YsSUFBUyxDQUM5QyxJQUNNaUcsRUFBTVIsRUFEQyxJQUFNekYsRUFBUStGLEVBTFYsRUFDTCxHQU1aQyxFQUFPekIsS0FBSzBCLEdBRWQsT0FBT0QsS0MxRExFLEVBQTJCLEdSRC9CLEVRSUEsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQmpHLElBQWpCa0csRUFDSCxPQUFPQSxFQUFhQyxRQUdyQixJQUFJQyxFQUFTTCxFQUF5QkUsR0FBWSxDQUdqREUsUUFBUyxJQU9WLE9BSEFFLEVBQW9CSixHQUFVRyxFQUFRQSxFQUFPRCxRQUFTSCxHQUcvQ0ksRUFBT0QsUVJyQmYsTUFLQXRCLE9BQU90QyxpQkFBaUIsUUFBUSxTQUFDK0QsR0FDL0IsSUFBTXBHLEVBQVNxRyxTQUFTQyxlQUFlLFVBQ2pDbkUsRUFBWWtFLFNBQVNDLGVBQWUsYUFDcEM3SCxFQUFRa0csT0FBTzRCLFdBTkwsUUFNMEM1QixPQUFPNEIsV0FDM0Q3SCxFQUFTaUcsT0FBTzRCLFdBUE4sSUFDQyxJQU1nRSxJQUFyQjVCLE9BQU82QixZQUVuRXhHLEVBQU92QixNQUFRQSxFQUNmdUIsRUFBT3RCLE9BQVNBLEVBQ0gsSUFBSSxVQUFheUQsRUFBV25DLEVBQVF2QixFQUFPQyxHQUVuRGlFLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWluYm93LXBhcnRpY2xlLWJyZWFrZXIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcmFpbmJvdy1wYXJ0aWNsZS1icmVha2VyLy4vc3JjL2NvbXBvbmVudHMvQmFyLnRzIiwid2VicGFjazovL3JhaW5ib3ctcGFydGljbGUtYnJlYWtlci8uL3NyYy9jb21wb25lbnRzL0Jsb2Nrcy50cyIsIndlYnBhY2s6Ly9yYWluYm93LXBhcnRpY2xlLWJyZWFrZXIvLi9zcmMvY29tcG9uZW50cy9HYW1lQ2FudmFzLnRzIiwid2VicGFjazovL3JhaW5ib3ctcGFydGljbGUtYnJlYWtlci8uL3NyYy9jb21wb25lbnRzL1BhcnRpY2xlLnRzIiwid2VicGFjazovL3JhaW5ib3ctcGFydGljbGUtYnJlYWtlci8uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovL3JhaW5ib3ctcGFydGljbGUtYnJlYWtlci8uL3NyYy9nYW1lL2luZGV4LnRzIiwid2VicGFjazovL3JhaW5ib3ctcGFydGljbGUtYnJlYWtlci8uL3NyYy91dGlscy9jb2xvcnMudHMiLCJ3ZWJwYWNrOi8vcmFpbmJvdy1wYXJ0aWNsZS1icmVha2VyL3dlYnBhY2svYm9vdHN0cmFwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbG9ja0JyZWFrZXIgZnJvbSAnLi9nYW1lJztcblxuY29uc3QgTUlOX1dJRFRIID0gNzAwO1xuY29uc3QgTUlOX0hFSUdIVCA9IDYwMDtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChlKSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCA+IE1JTl9XSURUSCA/IE1JTl9XSURUSCA6IHdpbmRvdy5pbm5lcldpZHRoO1xuICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCA+IE1JTl9XSURUSCA/IE1JTl9IRUlHSFQgOiB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjg1O1xuXG4gIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICBjb25zdCBnYW1lID0gbmV3IEJsb2NrQnJlYWtlcihjb250YWluZXIsIGNhbnZhcywgd2lkdGgsIGhlaWdodCk7XG5cbiAgZ2FtZS5pbml0KCk7XG59KTsiLCJpbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCJ1dGlscy9jb2xvcnNcIjtcblxuY29uc3QgQkFSX0NPTE9SOiBSR0JDb2xvciA9IHsgcmVkOiAyNTUsIGdyZWVuOiAwLCBibHVlOiAwIH07XG5jbGFzcyBCYXIge1xuICB4OiBudW1iZXIgPSAwO1xuICB5OiBudW1iZXIgPSAwO1xuICB3aWR0aDogbnVtYmVyID0gNTA7XG4gIGhlaWdodDogbnVtYmVyID0gMTA7XG4gIGNvbG9yOiBSR0JDb2xvciA9IEJBUl9DT0xPUlxuXG4gIGhpdFRlc3RQb2ludCh4Om51bWJlciwgeTpudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCA+PSB0aGlzLnggJiYgXG4gICAgICB4IDw9IHRoaXMueCArIHRoaXMud2lkdGggJiYgXG4gICAgICB5ID49IHRoaXMueSAmJiBcbiAgICAgIHkgPD0gdGhpcy55ICsgdGhpcy5oZWlnaHRcbiAgICApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXI7IiwiaW1wb3J0IFBhcnRpY2xlIGZyb20gJy4vUGFydGljbGUnO1xuaW1wb3J0IHsgZ2V0UmFpbmJvd0NvbG9ycyB9IGZyb20gJ3V0aWxzL2NvbG9ycyc7XG5cbmNsYXNzIEJsb2NrcyB7XG4gIHByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xuICBcbiAgY291bnQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2NvdW50OyB9XG4gIHdpZHRoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl93aWR0aDsgfVxuICBoZWlnaHQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxuXG4gIHZhbHVlczogKFBhcnRpY2xlIHwgdW5kZWZpbmVkKVtdO1xuXG4gIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fY291bnQgPSB3aWR0aCAqIGhlaWdodDtcbiAgICB0aGlzLnZhbHVlcyA9IG5ldyBBcnJheSh3aWR0aCAqIGhlaWdodCk7XG5cbiAgICBjb25zdCByYWluYm93Q29sb3JzID0gZ2V0UmFpbmJvd0NvbG9ycyh0aGlzLl93aWR0aCk7XG4gICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX3dpZHRoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGo6IG51bWJlciA9IDA7IGogPCB0aGlzLl9oZWlnaHQ7IGorKykge1xuICAgICAgICB2YXIgcDogUGFydGljbGUgPSBuZXcgUGFydGljbGUoaSwgaiwgcmFpbmJvd0NvbG9yc1tpXSk7XG4gICAgICAgIHRoaXMudmFsdWVzW2kgKyBqICogdGhpcy5fd2lkdGhdID0gcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRQYXJ0aWNsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFBhcnRpY2xlIHwgdW5kZWZpbmVkIHtcbiAgICB2YXIgaW5kZXg6IG51bWJlciA9IHggKyB5ICogdGhpcy5fd2lkdGg7XG4gICAgaWYgKGluZGV4ID49IHRoaXMudmFsdWVzLmxlbmd0aCB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbHVlc1t4ICsgeSAqIHRoaXMuX3dpZHRoXTtcbiAgfVxuXG4gIHJlbW92ZVBhcnRpY2xlKHg6IG51bWJlciwgeTogbnVtYmVyKTogUGFydGljbGUgfCB1bmRlZmluZWQge1xuICAgIHZhciBwOiBQYXJ0aWNsZSB8IHVuZGVmaW5lZCA9IHRoaXMudmFsdWVzW3ggKyB5ICogdGhpcy5fd2lkdGhdO1xuICAgIGlmIChwKSB7XG4gICAgICB0aGlzLl9jb3VudC0tO1xuICAgICAgdGhpcy52YWx1ZXNbeCArIHkgKiB0aGlzLl93aWR0aF0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsb2NrczsiLCJpbXBvcnQgeyBCYXIgfSBmcm9tIFwiY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tIFwidXRpbHMvY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDYW52YXMge1xuICBwcml2YXRlIF9jYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBwcml2YXRlIF9jYW52YXNDdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGw7XG4gIHByaXZhdGUgX2ltZ0RhdGEhOiBJbWFnZURhdGE7XG4gIHByaXZhdGUgX3BpeGVscyE6IFVpbnQ4Q2xhbXBlZEFycmF5O1xuXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5fY2FudmFzQ3R4ID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyQmFyKGJhcjogQmFyKSB7XG4gICAgdGhpcy5fY2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xuICAgIHRoaXMuX2NhbnZhc0N0eC5maWxsU3R5bGUgPSBgcmdiKCR7YmFyLmNvbG9yLnJlZH0sJHtiYXIuY29sb3IuZ3JlZW59LCR7YmFyLmNvbG9yLmJsdWV9KWA7XG4gICAgdGhpcy5fY2FudmFzQ3R4LmZpbGxSZWN0KGJhci54LCBiYXIueSwgYmFyLndpZHRoLCBiYXIuaGVpZ2h0KTtcbiAgICB0aGlzLl9jYW52YXNDdHguc3Ryb2tlKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgdGhpcy5fY2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgIHRoaXMuX2ltZ0RhdGEgPSB0aGlzLl9jYW52YXNDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuX2NhbnZhcy53aWR0aCwgdGhpcy5fY2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5fcGl4ZWxzID0gdGhpcy5faW1nRGF0YS5kYXRhO1xuICB9XG5cbiAgcHVibGljIHJlbmRlcigpIHtcbiAgICB0aGlzLl9jYW52YXNDdHgucHV0SW1hZ2VEYXRhKHRoaXMuX2ltZ0RhdGEsIDAsIDApO1xuICB9XG5cbiAgcHVibGljIHNldFBpeGVsKHg6IG51bWJlciwgeTpudW1iZXIsIGNvbG9yOiBSR0JDb2xvcik6IHZvaWQge1xuICAgIHZhciB3aWR0aEJhc2UgPSB0aGlzLl9pbWdEYXRhLndpZHRoICogNDtcbiAgXG4gICAgdmFyIGluZGV4ID0gKCh5ICogd2lkdGhCYXNlKSArICh4ICogNCkpO1xuICAgIHRoaXMuX3BpeGVsc1tpbmRleF0gPSBjb2xvci5yZWQ7IC8vUlxuICAgIHRoaXMuX3BpeGVsc1tpbmRleCArIDFdID0gY29sb3IuZ3JlZW47IC8vR1xuICAgIHRoaXMuX3BpeGVsc1tpbmRleCArIDJdID0gY29sb3IuYmx1ZTsgLy9CXG4gICAgdGhpcy5fcGl4ZWxzW2luZGV4ICsgM10gPSAweEZGOyAvL0FcbiAgfVxuXG4gIHB1YmxpYyBvZmZzZXRMZWZ0KCkgeyByZXR1cm4gdGhpcy5fY2FudmFzLm9mZnNldExlZnQ7IH1cbn0iLCJpbXBvcnQgeyBSR0JDb2xvciwgREVGQVVMVF9DT0xPUiB9IGZyb20gXCJ1dGlscy9jb2xvcnNcIjtcblxuY2xhc3MgUGFydGljbGUge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcblxuICB4U3BlZWQ6IG51bWJlciA9IDA7XG4gIHlTcGVlZDogbnVtYmVyID0gMDtcbiAgY29sb3I6IFJHQkNvbG9yID0gREVGQVVMVF9DT0xPUjtcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCBjb2xvcjogUkdCQ29sb3IpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICB9XG5cbiAgcHVibGljIGludmVydFhEaXJlY3Rpb24oKSB7XG4gICAgdGhpcy54U3BlZWQgPSAtdGhpcy54U3BlZWQ7XG4gIH1cbiAgcHVibGljIGludmVydFlEaXJlY3Rpb24oKSB7XG4gICAgdGhpcy55U3BlZWQgPSAtdGhpcy55U3BlZWQ7XG4gIH1cbiAgcHVibGljIFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLngpO1xuICB9XG4gIHB1YmxpYyBZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy55KTtcbiAgfVxuICBwdWJsaWMgc3BlZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueFNwZWVkICogdGhpcy54U3BlZWQgKyB0aGlzLnhTcGVlZCAqIHRoaXMueFNwZWVkKVxuICB9XG4gIHB1YmxpYyByYWRpYW4oKTogbnVtYmVyIHsgXG4gICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55U3BlZWQsIHRoaXMueFNwZWVkKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhcnRpY2xlOyIsImltcG9ydCBCYXIgZnJvbSAnLi9CYXInO1xuaW1wb3J0IEJsb2NrcyBmcm9tICcuL0Jsb2Nrcyc7XG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi9QYXJ0aWNsZSc7XG5pbXBvcnQgR2FtZUNhbnZhcyBmcm9tICcuL0dhbWVDYW52YXMnO1xuXG5leHBvcnQgeyBCYXIsIEJsb2NrcywgUGFydGljbGUsIEdhbWVDYW52YXMgfTsiLCJpbXBvcnQgeyBCbG9ja3MsIFBhcnRpY2xlLCBCYXIsIEdhbWVDYW52YXMgfSBmcm9tICdjb21wb25lbnRzJztcbmltcG9ydCB7IERFRkFVTFRfQ09MT1IgfSBmcm9tICd1dGlscy9jb2xvcnMnO1xuXG5jbGFzcyBCbG9ja0JyZWFrZXIge1xuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfY2FudmFzOiBHYW1lQ2FudmFzO1xuICBwcml2YXRlIF9ibG9ja3MhOiBCbG9ja3M7XG4gIHByaXZhdGUgX2ZhbGxCbG9ja3MhOiBQYXJ0aWNsZVtdO1xuICBwcml2YXRlIF9iYWxscyE6IFBhcnRpY2xlW107XG4gIHByaXZhdGUgX2JhciE6IEJhcjtcbiAgLy8gZnBzIHN0dWZmXG4gIHByaXZhdGUgX2ZwczogbnVtYmVyID0gMzA7XG4gIHByaXZhdGUgX2Zwc0ludGVydmFsITogbnVtYmVyO1xuICBwcml2YXRlIF9ub3chOiBudW1iZXI7XG4gIHByaXZhdGUgX3RoZW4hOiBudW1iZXI7XG4gIHByaXZhdGUgX2VsYXBzZWQhOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBfaGFuZGxlV2luKCkge1xuICAgIGFsZXJ0KFwiRG9uZSFcXG5cIik7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBwcml2YXRlIF9oYW5kbGVMb3NlKCkge1xuICAgIGFsZXJ0KFwiVHJ5IGFnYWluXCIpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlKCkge1xuICAgIHRoaXMuX25vdyA9IERhdGUubm93KCk7XG4gICAgdGhpcy5fZWxhcHNlZCA9IHRoaXMuX25vdyAtIHRoaXMuX3RoZW47XG5cbiAgICBpZiAodGhpcy5fY2FudmFzKSB7XG4gICAgICBpZiAodGhpcy5fZWxhcHNlZCA+IHRoaXMuX2Zwc0ludGVydmFsKSB7XG4gICAgICAgIC8vIEdldCByZWFkeSBmb3IgbmV4dCBmcmFtZSBieSBzZXR0aW5nIHRoZW49bm93LCBidXQuLi5cbiAgICAgICAgLy8gQWxzbywgYWRqdXN0IGZvciBmcHNJbnRlcnZhbCBub3QgYmVpbmcgbXVsdGlwbGUgb2YgMTYuNjdcbiAgICAgICAgdGhpcy5fdGhlbiA9IHRoaXMuX25vdyAtICh0aGlzLl9lbGFwc2VkICUgdGhpcy5fZnBzSW50ZXJ2YWwpO1xuXG4gICAgICAgIHRoaXMuX2NhbnZhcy5jbGVhcigpO1xuXG4gICAgICAgIC8vIHJlbmRlciBibG9ja3NcbiAgICAgICAgdGhpcy5fYmxvY2tzLnZhbHVlcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zZXRQaXhlbChibG9jay54LCBibG9jay55LCBibG9jay5jb2xvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcmVtb3ZlQmFsbHM6IFBhcnRpY2xlW10gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fYmFsbHMuZm9yRWFjaChiYWxsID0+IHtcbiAgICAgICAgICB2YXIgYlNwZWVkOiBudW1iZXIgPSBiYWxsLnNwZWVkKCk7XG4gICAgICAgICAgdmFyIGJSYWRpYW46IG51bWJlciA9IGJhbGwucmFkaWFuKCk7XG5cbiAgICAgICAgICAvLyBSZW5kZXIgYSBsaW5lIG9mIGxlbmd0aCBzcGVlZFxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYlNwZWVkOyBpKyspIHtcbiAgICAgICAgICAgIGJhbGwueCArPSBiYWxsLnhTcGVlZCAvIGJTcGVlZDtcbiAgICAgICAgICAgIGJhbGwueSArPSBiYWxsLnlTcGVlZCAvIGJTcGVlZDtcblxuICAgICAgICAgICAgdmFyIGhpdFBhcnRpY2xlOiBQYXJ0aWNsZSB8IHVuZGVmaW5lZCA9IHRoaXMuX2Jsb2Nrcy5nZXRQYXJ0aWNsZShiYWxsLlgoKSwgYmFsbC5ZKCkpO1xuICAgICAgICAgICAgaWYgKGhpdFBhcnRpY2xlKSB7XG4gICAgICAgICAgICAgIHZhciByZW1vdmVkUDogUGFydGljbGUgfCB1bmRlZmluZWQgPSB0aGlzLl9ibG9ja3MucmVtb3ZlUGFydGljbGUoYmFsbC5YKCksIGJhbGwuWSgpKTtcbiAgICAgICAgICAgICAgaWYgKHJlbW92ZWRQKSB7XG4gICAgICAgICAgICAgICAgLy8gaGl0IHBhcnRpY2xlIG1vdmVzIGF0IGFuIGFuZ2xlIGZyb20gdGhlIGNvbGlkaW5nIGJhbGxcbiAgICAgICAgICAgICAgICByZW1vdmVkUC54U3BlZWQgPSBNYXRoLmNvcyhiUmFkaWFuICsgTWF0aC5QSSAqIDIgLyAoMzAgKiBNYXRoLnJhbmRvbSgpKSAtIDE1KSAqIDM7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZFAueVNwZWVkID0gMTtcbiAgICAgICAgICAgICAgICByZW1vdmVkUC5jb2xvciA9IGhpdFBhcnRpY2xlLmNvbG9yO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZhbGxCbG9ja3MucHVzaChyZW1vdmVkUCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gY29sbGlkaW5nIGJhbGwgaW52ZXJ0cyB5LWRpcmVjdGlvblxuICAgICAgICAgICAgICBiYWxsLmludmVydFlEaXJlY3Rpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgYmFsbCBoaXQgdGhlIGVkZ2VzIGludmVydCB4LWRpcmVjdGlvblxuICAgICAgICAgICAgaWYgKChiYWxsLnggPCAwICYmIGJhbGwueFNwZWVkIDwgMCkgfHwgKGJhbGwueCA+IHRoaXMuX3dpZHRoICYmIGJhbGwueFNwZWVkID4gMCkpIHtcbiAgICAgICAgICAgICAgYmFsbC5pbnZlcnRYRGlyZWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBiYWxsIG91dCBvZiBib3VuZHMgKHRvcCkgaW52ZXJ0IHktZGlyZWN0aW9uXG4gICAgICAgICAgICBpZiAoYmFsbC55IDwgMCAmJiBiYWxsLnlTcGVlZCA8IDApIHtcbiAgICAgICAgICAgICAgYmFsbC5pbnZlcnRZRGlyZWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBiYWxsIG91dCBvZiBib3VuZHMgKGJvdHRvbSkgcmVtb3ZlXG4gICAgICAgICAgICBpZiAoYmFsbC55ID4gdGhpcy5faGVpZ2h0IHx8IGJhbGwueSA8IDApIHtcbiAgICAgICAgICAgICAgcmVtb3ZlQmFsbHMucHVzaChiYWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGl0IGhpdCB0aGUgYmFyIGludmVydCBkaXJlY3Rpb25cbiAgICAgICAgICAgIGlmICh0aGlzLl9iYXIuaGl0VGVzdFBvaW50KGJhbGwueCwgYmFsbC55KSkge1xuICAgICAgICAgICAgICBiYWxsLnlTcGVlZCA9IC1NYXRoLmFicyhiYWxsLnlTcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zZXRQaXhlbChiYWxsLlgoKSwgYmFsbC5ZKCksIGJhbGwuY29sb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVtb3ZlQmFsbHMuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9iYWxscy5pbmRleE9mKGIpO1xuICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fYmFsbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZW1vdmVGYWxsQnM6IFBhcnRpY2xlW10gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fZmFsbEJsb2Nrcy5mb3JFYWNoKGZhbGxQID0+IHtcbiAgICAgICAgICBmYWxsUC55U3BlZWQgKz0gMC4xO1xuICAgICAgICAgIGZhbGxQLnggKz0gZmFsbFAueFNwZWVkO1xuICAgICAgICAgIGlmIChmYWxsUC54IDwgMCkge1xuICAgICAgICAgICAgZmFsbFAueCArPSB0aGlzLl93aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmFsbFAueSArPSBmYWxsUC55U3BlZWQ7XG4gICAgICAgICAgdGhpcy5fY2FudmFzLnNldFBpeGVsKGZhbGxQLlgoKSwgZmFsbFAuWSgpLCBmYWxsUC5jb2xvcik7XG5cbiAgICAgICAgICBpZiAodGhpcy5fYmFyLmhpdFRlc3RQb2ludChmYWxsUC54LCBmYWxsUC55KSkge1xuICAgICAgICAgICAgdmFyIG5ld2JhbGw6IFBhcnRpY2xlID0gbmV3IFBhcnRpY2xlKGZhbGxQLngsIGZhbGxQLnksIGZhbGxQLmNvbG9yKTtcbiAgICAgICAgICAgIG5ld2JhbGwueFNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDEwO1xuICAgICAgICAgICAgbmV3YmFsbC55U3BlZWQgPSBNYXRoLnJhbmRvbSgpICogOSArIDE7XG4gICAgICAgICAgICB0aGlzLl9iYWxscy5wdXNoKG5ld2JhbGwpO1xuICAgICAgICAgICAgcmVtb3ZlRmFsbEJzLnB1c2goZmFsbFApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmFsbFAueSA+IHRoaXMuX2hlaWdodCkge1xuICAgICAgICAgICAgcmVtb3ZlRmFsbEJzLnB1c2goZmFsbFApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVtb3ZlRmFsbEJzLmZvckVhY2goYiA9PiB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmFsbEJsb2Nrcy5pbmRleE9mKGIpO1xuICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fZmFsbEJsb2Nrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRHJhd1xuICAgICAgICB0aGlzLl9jYW52YXMucmVuZGVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ibG9ja3MuY291bnQoKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVdpbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9iYWxscy5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVMb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYmFyIHJlbmRlcnMgaW5kZXBlbmRhbnQgb2YgZnBzIGNvbnN0cmFpbnRcbiAgICAgIHRoaXMuX2NhbnZhcy5yZW5kZXJCYXIodGhpcy5fYmFyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF90b3VjaG1vdmUoZXZ0OiBhbnkpIHtcbiAgICB0aGlzLl9iYXIueCA9IGV2dC50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLl9jYW52YXMub2Zmc2V0TGVmdCgpIC0gKHRoaXMuX2Jhci53aWR0aCAvIDIpO1xuICAgIGlmICh0aGlzLl9iYXIueCArIHRoaXMuX2Jhci53aWR0aCA+IHRoaXMuX3dpZHRoKSB7XG4gICAgICB0aGlzLl9iYXIueCA9IHRoaXMuX3dpZHRoIC0gdGhpcy5fYmFyLndpZHRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYmFyLnggPCAwKSB7XG4gICAgICB0aGlzLl9iYXIueCA9IDA7XG4gICAgfVxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfbW91c2Vtb3ZlKGV2dDogYW55KSB7XG4gICAgdGhpcy5fYmFyLnggPSBldnQuY2xpZW50WCAtIHRoaXMuX2NhbnZhcy5vZmZzZXRMZWZ0KCkgLSAodGhpcy5fYmFyLndpZHRoIC8gMik7XG4gICAgaWYgKHRoaXMuX2Jhci54ICsgdGhpcy5fYmFyLndpZHRoID4gdGhpcy5fd2lkdGgpIHtcbiAgICAgIHRoaXMuX2Jhci54ID0gdGhpcy5fd2lkdGggLSB0aGlzLl9iYXIud2lkdGg7XG4gICAgfVxuICAgIGlmICh0aGlzLl9iYXIueCA8IDApIHtcbiAgICAgIHRoaXMuX2Jhci54ID0gMDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaW5pdCgpIHtcbiAgICB0aGlzLl9ibG9ja3MgPSBuZXcgQmxvY2tzKHRoaXMuX3dpZHRoLCAyMDApO1xuXG4gICAgdGhpcy5fZmFsbEJsb2NrcyA9IG5ldyBBcnJheSgpO1xuXG4gICAgY29uc3QgYmFySGVpZ2h0ID0gMTA7XG4gICAgY29uc3QgYmFyWSA9IHRoaXMuX2hlaWdodCAtIGJhckhlaWdodCAtIDI7XG4gICAgdGhpcy5fYmFyID0gbmV3IEJhcigwLCBiYXJZLCAyMDAsIGJhckhlaWdodCk7XG5cbiAgICAvLyBTdGFydCB3aXRoIHdoaXRlIGJhbGwgaW4gdGhlIG1pZGRsZVxuICAgIHZhciBfaW5pdGlhbEJhbGw6IFBhcnRpY2xlID0gbmV3IFBhcnRpY2xlKHRoaXMuX3dpZHRoIC8gMiwgdGhpcy5faGVpZ2h0IC8gMiwgREVGQVVMVF9DT0xPUik7XG4gICAgX2luaXRpYWxCYWxsLnhTcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAxMDtcbiAgICBfaW5pdGlhbEJhbGwueVNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDkgLSAxO1xuXG4gICAgdGhpcy5fYmFsbHMgPSBuZXcgQXJyYXkoKTtcbiAgICB0aGlzLl9iYWxscy5wdXNoKF9pbml0aWFsQmFsbCk7XG5cbiAgICB0aGlzLl9mcHNJbnRlcnZhbCA9IDEwMDAgLyB0aGlzLl9mcHM7XG4gICAgdGhpcy5fdGhlbiA9IERhdGUubm93KCk7XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fY2FudmFzID0gbmV3IEdhbWVDYW52YXMoY2FudmFzKTtcblxuICAgIC8vIENvbnRyb2xsIGlzIHRoZSBlbnRpcmUgY29udGFpbmVyIGFyZWEgXG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX21vdXNlbW92ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX3RvdWNobW92ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxvY2tCcmVha2VyO1xuIiwiZXhwb3J0IHR5cGUgUkdCQ29sb3IgPSB7XG4gIHJlZDogbnVtYmVyLFxuICBncmVlbjogbnVtYmVyLFxuICBibHVlOiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09MT1I6IFJHQkNvbG9yID0geyByZWQ6IDB4RkYsIGdyZWVuOiAweEZGLCBibHVlOiAweEZGIH07XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9hbmRfSFNWIzp+OnRleHQ9OCUyQ0gpKSUzRCUyQjElN0QtLEhTViUyMHRvJTIwUkdCLC0lNUJlZGl0JTVEXG5jb25zdCBIU1ZUb1JHQiA9IChodWU6IG51bWJlciwgc2F0dXJhdGlvbjogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogUkdCQ29sb3IgPT4ge1xuICBpZiAoXG4gICAgKGh1ZSA8IDAgfHwgaHVlID4gMzYwKSB8fCAgICAgICAgICAgICAvLyBbMCwgMzYwXVxuICAgIChzYXR1cmF0aW9uIDwgMCB8fCBzYXR1cmF0aW9uID4gMSkgfHwgLy8gWzAsIDFdXG4gICAgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEpICAgICAgICAgICAgICAvLyBbMCwgMV1cbiAgKSB7XG4gICAgdGhyb3cgJ0luY29ycmVjdCBIU1YgdmFsdWVzIFtIU1ZUb1JHQl0nXG4gIH1cbiAgY29uc3QgaCA9IGh1ZS82MDtcblxuICBjb25zdCBjID0gdmFsdWUgKiBzYXR1cmF0aW9uOyAvLyBDaHJvbWFcbiAgLy8gSW50ZXJtZWRpYXRlIHZhbHVlIFggZm9yIHRoZSBzZWNvbmQgbGFyZ2VzdCBjb21wb25lbnQgb2YgdGhpcyBjb2xvclxuICBjb25zdCB4ID0gYyAqICgxIC0gTWF0aC5hYnMoaCAlIDIgLSAxKSk7XG5cbiAgaWYgKGggPj0gMCAmJiBoIDwgMSkge1xuICAgIHJldHVybiB7IHJlZDogYyAqIDI1NSwgZ3JlZW46IHggKiAyNTUsIGJsdWU6IDAgfTtcbiAgfVxuICBpZiAoaCA+PSAxICYmIGggPCAyKSB7XG4gICAgcmV0dXJuIHsgcmVkOiB4ICogMjU1LCBncmVlbjogYyAgKiAyNTUsIGJsdWU6IDAgfTtcbiAgfVxuICBpZiAoaCA+PSAyICYmIGggPCAzKSB7XG4gICAgcmV0dXJuIHsgcmVkOiAwLCBncmVlbjogYyAgKiAyNTUsIGJsdWU6IHggKiAyNTUgfTtcbiAgfVxuICBpZiAoaCA+PSAzICYmIGggPCA0KSB7XG4gICAgcmV0dXJuIHsgcmVkOiAwLCBncmVlbjogeCAqIDI1NSwgYmx1ZTogYyAgKiAyNTUgfTtcbiAgfVxuICBpZiAoaCA+PSA0ICYmIGggPCA1KSB7XG4gICAgcmV0dXJuIHsgcmVkOiB4ICogMjU1LCBncmVlbjogMCwgYmx1ZTogYyAgKiAyNTUgfTtcbiAgfVxuICBpZiAoaCA+PSA1ICYmIGggPCA2KSB7XG4gICAgcmV0dXJuIHsgcmVkOiBjICAqIDI1NSwgZ3JlZW46IDAsIGJsdWU6IHggKiAyNTUgfTtcbiAgfVxuXG4gIHJldHVybiBERUZBVUxUX0NPTE9SO1xufVxuXG4vKlxuICBDcmVhdGUgYW4gXCJuXCIgbGVuZ3RoIGFycmF5IG9mIHJiZyBjb2xvcnMgb2YgaW5jcmVhc2luZyBodWUgWzAgLSAzNjBdIFxuICB3aXRoIG1heCBzYXR1cmF0aW9uIGFuZCB2YWx1ZSAoMSAmIDEpXG4qL1xuZXhwb3J0IGNvbnN0IGdldFJhaW5ib3dDb2xvcnMgPSAobjogbnVtYmVyKTogUkdCQ29sb3JbXSAgPT4ge1xuICBjb25zdCBzYXR1cmF0aW9uID0gMS4wO1xuICBjb25zdCB2YWx1ZSA9IDEuMDtcbiAgY29uc3QgY29sb3JzOiBSR0JDb2xvcltdID0gW107XG5cbiAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgIGNvbnN0IGh1ZSA9ICgzNjAgKiBpbmRleCAvIG4pOyAvLyByZWR1Y2UgdG8gZmFjdG9yIG9mIDM2MFxuICAgIGNvbnN0IHJnYiA9IEhTVlRvUkdCKGh1ZSwgc2F0dXJhdGlvbiwgdmFsdWUpO1xuICAgIGNvbG9ycy5wdXNoKHJnYik7IFxuICB9XG4gIHJldHVybiBjb2xvcnM7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiJdLCJuYW1lcyI6WyJCQVJfQ09MT1IiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwiY29sb3IiLCJ0aGlzIiwiaGl0VGVzdFBvaW50IiwiQmFyIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9jb3VudCIsInZhbHVlcyIsIkFycmF5IiwicmFpbmJvd0NvbG9ycyIsImdldFJhaW5ib3dDb2xvcnMiLCJpIiwiaiIsInAiLCJjb3VudCIsImdldFBhcnRpY2xlIiwiaW5kZXgiLCJsZW5ndGgiLCJyZW1vdmVQYXJ0aWNsZSIsInVuZGVmaW5lZCIsIkJsb2NrcyIsImNhbnZhcyIsIl9jYW52YXMiLCJfY2FudmFzQ3R4IiwiZ2V0Q29udGV4dCIsImNsZWFyIiwicmVuZGVyQmFyIiwiYmFyIiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2UiLCJjbGVhclJlY3QiLCJfaW1nRGF0YSIsImdldEltYWdlRGF0YSIsIl9waXhlbHMiLCJkYXRhIiwicmVuZGVyIiwicHV0SW1hZ2VEYXRhIiwic2V0UGl4ZWwiLCJvZmZzZXRMZWZ0IiwieFNwZWVkIiwieVNwZWVkIiwiREVGQVVMVF9DT0xPUiIsImludmVydFhEaXJlY3Rpb24iLCJpbnZlcnRZRGlyZWN0aW9uIiwiWCIsIk1hdGgiLCJyb3VuZCIsIlkiLCJzcGVlZCIsInNxcnQiLCJyYWRpYW4iLCJhdGFuMiIsIlBhcnRpY2xlIiwiR2FtZUNhbnZhcyIsImNvbnRhaW5lciIsIl9mcHMiLCJhZGRFdmVudExpc3RlbmVyIiwiX21vdXNlbW92ZSIsImJpbmQiLCJfdG91Y2htb3ZlIiwiX2hhbmRsZVdpbiIsImFsZXJ0IiwiaW5pdCIsIl9oYW5kbGVMb3NlIiwiX3VwZGF0ZSIsIl9ub3ciLCJEYXRlIiwibm93IiwiX2VsYXBzZWQiLCJfdGhlbiIsIl9mcHNJbnRlcnZhbCIsIl9ibG9ja3MiLCJmb3JFYWNoIiwiYmxvY2siLCJyZW1vdmVCYWxscyIsIl9iYWxscyIsImJhbGwiLCJiU3BlZWQiLCJiUmFkaWFuIiwiaGl0UGFydGljbGUiLCJyZW1vdmVkUCIsImNvcyIsIlBJIiwicmFuZG9tIiwiX2ZhbGxCbG9ja3MiLCJwdXNoIiwiX2JhciIsImFicyIsImIiLCJpbmRleE9mIiwic3BsaWNlIiwicmVtb3ZlRmFsbEJzIiwiZmFsbFAiLCJuZXdiYWxsIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXZ0IiwidG91Y2hlcyIsImNsaWVudFgiLCJwcmV2ZW50RGVmYXVsdCIsImJhclkiLCJfaW5pdGlhbEJhbGwiLCJCbG9ja0JyZWFrZXIiLCJIU1ZUb1JHQiIsImh1ZSIsInNhdHVyYXRpb24iLCJ2YWx1ZSIsImgiLCJjIiwibiIsImNvbG9ycyIsInJnYiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9